// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ✅ **1. คลังสินค้า**
model Warehouse {
  id          String   @id @default(uuid())
  name        String
  location    String
  capacity    Int
  inventories Inventory[]
  orders      Order[]
  Alert       Alert[]
  InventoryForecast InventoryForecast[]
  OrderItem OrderItem[]
}

/// ✅ **2. สินค้า**
model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  createdAt   DateTime @default(now())
  inventories Inventory[]
  orderItems  OrderItem[]
  forecasts   InventoryForecast[]
  alerts      Alert[]
}

/// ✅ **3. สินค้าคงคลังแต่ละคลัง**
model Inventory {
  id          String   @id @default(uuid())
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  stock       Int
  minStock    Int
  maxStock    Int
  lastUpdated DateTime @default(now())
}

/// ✅ **4. คำสั่งซื้อแบบหลายคลัง**
model Order {
  id          String   @id @default(uuid())
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  totalPrice  Decimal
  status      OrderStatus
  createdAt   DateTime @default(now())
  orderItems  OrderItem[]
  tracking    Tracking[]
  Warehouse   Warehouse[]
}

/// ✅ **5. รายการสินค้าภายในคำสั่งซื้อ**
model OrderItem {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  quantity    Int
  subtotal    Decimal
}

/// ✅ **6. ติดตามสถานะสินค้าใน Supply Chain**
model Tracking {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  status      TrackingStatus
  location    String?
  updatedAt   DateTime @default(now())
}

/// ✅ **7. คาดการณ์สินค้าคงคลัง**
model InventoryForecast {
  id          String   @id @default(uuid())
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  predictedDemand Int
  forecastDate  DateTime
}

/// ✅ **8. การแจ้งเตือนสินค้าคงคลังต่ำ**
model Alert {
  id          String   @id @default(uuid())
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  type        AlertType
  message     String
  createdAt   DateTime @default(now())
}

/// ✅ **9. ลูกค้า**
model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  orders    Order[]
}

/// ✅ **10. ENUMS**
enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
}

enum TrackingStatus {
  Processing    //เตรียมสินค้า
  InTransit     //ระหว่างส่ง
  Delivered     //ส่งเสร็จแล้ว
  Delayed       //ล่าช้า
}

enum AlertType {
  LowStock
  OutOfStock
}